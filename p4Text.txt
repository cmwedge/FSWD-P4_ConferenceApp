Session implementation was largely defined by requirements. Conference sessions are child entities of Conference entities. Sessions have a created timestamp to assist with featured speaker query.

Speakers are represented as strings. This leads to the possibility of ambiguity if more than one speaker with the same name is scheduled to speak at a conference, but that can be alleviated by including additional indentifying information in the speaker field, for example: John Smith (Chair of Mathematics, Harvard). A more robust method of representing speakers is a good potential future enhancement candidate.

Users can wishlish a session regardless of whether they're registered for the associated conference. With this design, wishlisted sessions could potentially lead to registering for a conference in the future, if, for example, a user realizes they've wishlisted many sessions from a single conference.

Two new queries:
	Conferences sorted by number of wishlisted sessions for current user
	Get speakers at conference

query: don't like workshops and don't like sessions after 7pm. What's the problem with this query?


task: duplicate names a problem

Featured speaker is limited to one. existing featured speaker can be overwritten.

doesn't do any date / time / duration / time conflict validation

Only one inequality filter per query is supported. So you can execute one and then manually filter in the code. Since there aren't likely to be many conference sessions, this should not be a significant issue. 

Future enhancements: time / duration / booking